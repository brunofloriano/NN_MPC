% This code implements the neural network-based (NN) Model Predictive
% Control (MPC) algorithm presented in the paper "Neural-network-based model predictive control for
% consensus of nonlinear systems", by Bruno R. O. Floriano, Alessandro N. Vargas, Joao Y. Ishihara,
% Henrique C. Ferreira (2022).

clear; close all; clc;

% Receives matrices A,B,L,Pi_estimated,K,
% initial conditions alpha, phi e phi_dot
% and the parameters Delta, delta, tmax, mu e tau
addpath 'WW20_Fig1'
addpath 'GL20_Fig3'
addpath 'ZH15'
addpath 'Car'
addpath 'functions'

%start_WW20_Fig1
%start_GL20_Fig3
%start_ZH15

Car_token = 0;
start_Car

%%%%%%%%%%%%%%%%%%% CHOOSE SIMULATION PARAMETERS %%%%%%%%%%%%%%%%%%%%%%%%%%
horizon = 100;
Kdelta = 0.5;
DATA_MINING = 0;
SAVE_DATA = 0;
ONLINE = 1;
MPC = 1;

save_folder = 'results\';


%%%%%%%%%%%%%%%%%%% INDIVIDUAL SYSTEM DYNAMICS %%%%%%%%%%%%%%%%%%%%%%%%%%%%

%x = [phi-alpha;phi_dot];
if Car_token == 0
    initial_state = [phi;phi_dot];
else
    initial_state = [phi;phi_dot;theta_dot;delta_dot];
end
n = size(initial_state,1);
m = size(B,2);


%%%%%%%%%%%%%%%%%%%%% COMMUNICATION GRAPH %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

N = length(L{1});
S = length(Pi_estimated);

Psi = transition_matrix(Pi_estimated,delta,Delta);
mc = dtmc(Psi);

%%%%%%%%%%%%%%%%%%%% CONTROL SYSTEM %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

K = zeros(m,n);
Kdata = zeros(1,m*n);

%%%%%%%%%%%%%%%%%%%% AUGMENTED SYSTEM %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
initial_state_augmented = [];
for i = 1:N
initial_state_augmented = [initial_state_augmented;initial_state(:,i)];
end
% Aaug = kron(eye(N),A) - kron(L{1},B*K);
% Baug = zeros(N*n,m);
Aaug = kron(eye(N),A);
Baug = kron(eye(N),B);


%%%%%%%%%%%%%%%%%%%%% SIMULATION %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if tdelta < Delta
    fprintf('Sampling time has to be greater than Delta \n','s');
    fprintf('Making tdelta = Delta \n','s');
    tdelta = Delta;
end
t = 0:tdelta:tmax-tdelta;
state(:,1) = initial_state_augmented;
mode = simulate(mc,(tmax)/Delta);


if DATA_MINING == 1 % for offline training
    max_sim = 70;
else
    max_sim = 1;
end

%pause

%max_sim = 100; %For crossvalidation
cnt = 1;
% OFFLINE TRAINING LOOP
for j = 1:max_sim
    %horizon = j;
% for j = 1:max_sim
    text = [t tmax:tdelta:(tmax+horizon*tdelta)];
    %nNeurons = j;
    clear Jdata net
    Kdata = zeros(1,m*n);
    %Kdata = [0 0 0 0];
    % DATA INITIALIZATION
    %K = K + DATA_MINING*[Kvector(1:2,j)';Kvector(3:4,j)']; This line is
    %for offline learning
    state(:,1) = initial_state_augmented;
    state0(:,1) = initial_state(:,1);
    delay = mu/2*randn(length(t),1) + (tau + mu/2);
    theta = mode(round(1*tdelta/Delta));
    Laplacian = L{theta};
    J(1) = 0.5*state(:,1)'*kron(Laplacian+Laplacian',eye(n))*state(:,1);
    Jdata = J(1);
    Kline = Kdata;
    %Kall(1,:) = Kline;
    Khold = K;
    Jmin = -1e20;
    Jprev = J(1);
    counter = 2;

 
    % SYSTEM LOOP
    for i = 2:length(t)
        
        % ONLINE LEARNING
        if ONLINE == 1
            if i <= 60
                condition = true;
            else
                condition = true; %J(i-1) > 1e4; %mean(abs(J(i-100:i-1))) > 10; %J(i-1) >= -1e30
                vf = 0;
            end
            
            if  condition
                net = feedforwardnet(nNeurons);
                net.trainParam.showWindow = 0;
                net = train(net,Kdata',Jdata);
                for k = 1:m*n
                    Kvector2(k,:) = (Kline(k)-Kdelta):Kdelta/2:(Kdelta+Kline(k));
                end
                Ktest = Kvector2(1,:);
                for k = 2:m*n
                    Ktest = combvec(Ktest,Kvector2(k,:));
                end
                y = net(Ktest);
                [value,index] = min(abs(y));
                Kline = Ktest(:,index)';
                K = vector2matrix(Kline,m,n);
                Kdata(counter,:) = Kline;
                Jdata(counter) = J(i-1);

                Khold = vector2matrix(Kdata(counter-1,:),m,n);
                Jmin = J(i-1);
                counter = counter + 1;
            else
                K = Khold;
            end
        end

        
        % DYNAMIC SYSTEM
        theta = mode(round(i*tdelta/Delta));
        Laplacian = L{theta};
        
        if ONLINE == 0
            K = Km{theta};
        end

        if i - 1 - round(delay(i)/tdelta) <= 0
            delayedstate = zeros(length(state(:,1)),1);
        else
            delayedstate = state(:,i-1-round(delay(i)/tdelta));
        end
        u = - kron(Laplacian,K)*delayedstate; % Eq. (4)
        eval(dynamic_function); % Eq. (1) and (5) 
        eval(dynamic_function0);% Eq. (7)
        
        % MPC
        if MPC == 1
            eye_matrix = eye(S);
            vstate(:,1) = state(:,i);
            vstate0(:,1) = state(1:n,i);
            vmode = simulate(mc,horizon,'X0',eye_matrix(theta,:));
            %vmode(1) = theta;
            for vtime = 1:horizon
                for s = 1:S
                    if vtime > 1
                        vu = - kron(L{s},K)*vstate(:,vtime-1);
                        eval(vdynamic_function);
                        eval(vdynamic_function0);
                    end
                    e = vstate(:,vtime) - kron(ones(N,1),vstate0(:,vtime)); % Eq. (8)
                    Jinst(vtime,s) = 0.5*e'*kron((L{s}+L{s}'),eye(n))*e; % Eq. (13)
                end
                
                if vtime == 1
                    Jmean(vtime) = Jinst(vtime,theta);
                else
                    Jmean(vtime) = sum(Jinst(vtime,:).*Psi(vmode(vtime-1),:)); % Eq. (14)
                end
                
            end
            
            J(i) = sum(Jmean);
            
        else
            J(i) = state(:,i)'*kron(Laplacian,eye(n))*state(:,i);
        end
        
        Jprev = J(i-1);
        
        % Simulation situation display
        current_sim = i/length(t)*100;
        if rem(i,100) == 0 && DATA_MINING == 0
            fprintf('Sim is at %d %% \n',round(current_sim));
        end

    end


    %current_sim = j/length(Kvector)*100;
    current_sim = j;
    if DATA_MINING == 1
        %For cross validation
        error = state;% - [alpha';0;0;0];
        serror = error.^2;
        
        MSE(:,cnt) =  sum( serror' )/length(state) ;
        for st = 1:6
            info = stepinfo(state(st,:),t);
            settling_time(st,cnt) = info.SettlingTime;
        end
        MSEn(cnt) = norm(MSE(:,cnt));
        
        Jfinal(j) = state(:,i)'*state(:,i);
        fprintf('Sim is at %d %% \n',round(100*current_sim/max_sim));
    end
cnt = cnt + 1;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%% PLOT %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
figure
subplot(2,1,1)
title('Without offset added')
%plot(t,state([1:2:N*2-1],:)+alpha');
% charc = [':-.'];
% color = ['rbg'];
% vector = [1:2:N*2-1];
% for agent = 1:N
%     plot(t,state(vector(agent),:),[color(agent) charc(agent)]);
%     hold on
% end

%plot(t,state([1:2:N*2-1],:));
plot(t,state([1:n:n*(N-1)+1],:));

xlabel('t')
ylabel('p')
subplot(2,1,2)

%plot(t,state([2:2:N*2],:));
plot(t,state([2:n:n*(N-1)+2],:));

ylabel('v')
xlabel('t')
legend('a1','a2','a3')

% figure
% subplot(2,1,1)
% title('With offset added')
% plot(t,state([1:2:N*2-1],:)+alpha');
% %plot(t,state([1:2:N*2-1],:));
% xlabel('t')
% ylabel('\phi_i')
% subplot(2,1,2)
% plot(t,state([2:2:N*2],:));
% ylabel('\phi`_i')
% xlabel('t')

% figure
% plot([1:10],MSE)
% xlabel('M')
% ylabel('MSE')


% figure
% plot(0:Delta:tmax,mode)
% ylim([0 3])
% xlabel('t')
% ylabel('Markov mode')
% 
% figure
% plot(t,delay)
% xlabel('t')
% ylabel('Delay')

%sim('WW20sim_aug');


%%%%%%%%%%%%%%%%%%%%%%%%%%%% SAVE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if SAVE_DATA == 1
    comment = ['This simulation was perform with:' newline];
    comment = [comment '']; %Include here what is different for this sim
    clocktime = clock;
    time_now = [num2str(clocktime(1)) '-' num2str(clocktime(2)) '-' num2str(clocktime(3)) '-' num2str(clocktime(4)) '-' num2str(clocktime(5))];
    savefolderlocal = [save_folder '\' save_mainname time_now];
    save_file = [savefolderlocal '\' save_mainname  time_now '.mat'];

    mkdir(savefolderlocal);
    save(save_file);
    saveas(gcf,[savefolderlocal '\' save_mainname  time_now '.eps']);
    saveas(gcf,[savefolderlocal '\' save_mainname  time_now '.fig']);
end
